{"version":3,"file":"static/js/1427.65e74c24.chunk.js","mappings":"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","sources":["pages/extra-pages/OnboardingForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Avatar,\r\n    CardContent,\r\n    CardActions,\r\n    Card,\r\n    Stack,\r\n    Typography,\r\n    Container,\r\n    Chip,\r\n    Grid,\r\n    Button,\r\n    Paper,\r\n    TextField,\r\n    ListItemAvatar,\r\n    ListItemButton,\r\n    ListItemSecondaryAction,\r\n    Tooltip,\r\n    Divider\r\n} from '@mui/material';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Stepper from '@mui/material/Stepper';\r\nimport Step from '@mui/material/Step';\r\nimport StepLabel from '@mui/material/StepLabel';\r\n\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\n\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { useEffect } from 'react';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport axios from 'axios';\r\nimport { apiBaseURL } from 'src/config-global';\r\nimport { toast } from 'react-toastify';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { OutlinedInput } from '@mui/material';\r\nimport { set } from 'lodash';\r\n// import { collection, firestore } from 'Firebase/index';\r\nimport { useContext } from 'react';\r\nimport { AuthContext } from 'src/App';\r\nimport { useAuthContext } from 'src/auth/useAuthContext';\r\n\r\n// ==============================|| SAMPLE PAGE ||============================== //\r\n\r\nlocalStorage.setItem('userId', '0987654321');\r\n\r\nconst steps = ['User Details', 'Application Access', 'Hardware Section', 'Approval', 'Other Info'];\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nfunction getStyles(name, personName, theme) {\r\n    return {\r\n        fontWeight: personName.indexOf(name) === -1 ? theme.typography.fontWeightRegular : theme.typography.fontWeightMedium\r\n    };\r\n}\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250\r\n        }\r\n    }\r\n};\r\n\r\nconst hardwareSection = steps.findIndex((curr) => curr === 'Hardware Section');\r\nconst deviceTypes = [\r\n    'Laptop - Standard Device',\r\n    'Laptop - Executive Device',\r\n    'Laptop - Developer Device',\r\n    'Desktop - Standard Device',\r\n    'Desktop - Executive Device',\r\n    'Desktop - Developer Device'\r\n];\r\nconst peripherals = ['Monitor', 'Additional Monitor', 'Mouse', 'Keyboard', 'Dock Station', 'Headset'];\r\nconst device = {};\r\nconst peripheral = {};\r\ndeviceTypes.forEach((val) => (device[val] = false));\r\nperipherals.forEach((val) => (peripheral[val] = false));\r\n\r\nconst OnboardingForm = () => {\r\n    const { user, getDataByRole } = useAuthContext();\r\n\r\n    const theme = useTheme();\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [skipped, setSkipped] = React.useState(new Set());\r\n\r\n    const [managersList, setManagersList] = React.useState([]);\r\n    useEffect(() => {\r\n        if (!user) return;\r\n        let manager = { target: { value: user.displayName } };\r\n        handleFormData('position', 'manager')(manager);\r\n        setManagersList(getDataByRole('manager'));\r\n    }, [user]);\r\n\r\n    const isStepOptional = (step) => {\r\n        return step === 1;\r\n    };\r\n\r\n    const isStepSkipped = (step) => {\r\n        return skipped.has(step);\r\n    };\r\n\r\n    const handleNext = () => {\r\n        if (activeStep === steps.length - 1) {\r\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            const managerResponse = [];\r\n            formData.managers.forEach((managerEmail) => managerResponse.push({ managerEmail }));\r\n            formData.managers = managerResponse;\r\n            formData.managerId = user.uid;\r\n            formData.company = user.company\r\n            // console.log(formData)\r\n            axios.post(`${apiBaseURL}/manager/onboarding`, { formData }).then((res) => {\r\n                toast.success('Request sent', {\r\n                    position: 'top-right',\r\n                    autoClose: 5000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: true,\r\n                    progress: undefined\r\n                });\r\n\r\n                // const queryRef = firestore.collection(collection).where('email', '==', role);\r\n                // const temp = [];\r\n                // queryRef.get().then((snapshot) => {\r\n                //     snapshot.forEach((doc) => {\r\n                //         let data = doc.data();\r\n                //         if (doc.id !== user.uid) {\r\n                //             data.uid = doc.id;\r\n                //             temp.push(data);\r\n                //         }\r\n                //     });\r\n                // });\r\n            });\r\n            return;\r\n        }\r\n\r\n        let newSkipped = skipped;\r\n        if (isStepSkipped(activeStep)) {\r\n            newSkipped = new Set(newSkipped.values());\r\n            newSkipped.delete(activeStep);\r\n        }\r\n\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        setSkipped(newSkipped);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    const handleSkip = () => {\r\n        if (!isStepOptional(activeStep)) {\r\n            // You probably want to guard against something like this,\r\n            // it should never occur unless someone's actively trying to break something.\r\n            throw new Error(\"You can't skip a step that isn't optional.\");\r\n        }\r\n\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        setSkipped((prevSkipped) => {\r\n            const newSkipped = new Set(prevSkipped.values());\r\n            newSkipped.add(activeStep);\r\n            return newSkipped;\r\n        });\r\n    };\r\n\r\n    const handleReset = () => {\r\n        setActiveStep(0);\r\n    };\r\n\r\n    const [checked, setChecked] = useState({\r\n        device,\r\n        peripheral\r\n    });\r\n\r\n    const handleChecked = (category) => (e) => {\r\n        setChecked((prev) => {\r\n            let temp = checked[category];\r\n            temp = { ...temp, [e.target.name]: !checked[category][e.target.name] };\r\n            return { ...prev, [category]: temp };\r\n        });\r\n    };\r\n\r\n    const [formData, setFormData] = useState({\r\n        personal: { firstName: '', middleName: '', lastName: '', country: '', offLoc: '', department: '' },\r\n        position: { manager: '', title: '', empType: '', start: '', end: '' },\r\n        application:\r\n            '',\r\n        hardware: { devices: [], peripherals: [] },\r\n        managers: [],\r\n        comments:\r\n            ''\r\n    });\r\n\r\n    //select managers\r\n    const handleChange = (event) => {\r\n        const {\r\n            target: { value }\r\n        } = event;\r\n        setFormData((prev) => ({\r\n            ...prev,\r\n            managers: value\r\n        }));\r\n    };\r\n\r\n    const handleDate = (par, field) => (newVal) => {\r\n        setFormData((prev) => {\r\n            let temp = prev[par];\r\n            temp = { ...temp, [field]: newVal };\r\n            return { ...prev, [par]: temp };\r\n        });\r\n    };\r\n\r\n    const handleFormData = (par, field) => (e) => {\r\n        setFormData((prev) => {\r\n            if (!par) {\r\n                return { ...prev, [field]: e.target.value };\r\n            }\r\n            let temp = prev[par];\r\n            temp = { ...temp, [field]: e.target.value };\r\n            return { ...prev, [par]: temp };\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n                <Grid item xs={12}>\r\n                    <Typography sx={{ float: 'left' }} variant=\"h3\">\r\n                        On Boarding Form\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <Container maxWidth=\"md\">\r\n                        <Stepper activeStep={activeStep}>\r\n                            {steps.map((label, index) => {\r\n                                const stepProps = {};\r\n                                const labelProps = {};\r\n                                return (\r\n                                    <Step key={label} {...stepProps}>\r\n                                        <StepLabel {...labelProps}>{label}</StepLabel>\r\n                                    </Step>\r\n                                );\r\n                            })}\r\n                        </Stepper>\r\n                        {activeStep === steps.length ? (\r\n                            <React.Fragment>\r\n                                <center>\r\n                                    <br />\r\n                                    <br />\r\n                                    <br />\r\n                                    <br />\r\n                                    <br />\r\n                                    <Typography variant=\"h2\">On Boarding Form successfully submitted</Typography>\r\n                                </center>\r\n                            </React.Fragment>\r\n                        ) : (\r\n                            <React.Fragment>\r\n                                {activeStep === 0 ? (\r\n                                    <>\r\n                                        <Typography variant=\"h4\" sx={{ mt: 2, mb: 4 }}>\r\n                                            Personal Details\r\n                                        </Typography>\r\n                                        <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n                                            <Grid item xs={4}>\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    label=\"First Name\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={formData.personal.firstName}\r\n                                                    onChange={handleFormData('personal', 'firstName')}\r\n                                                    required\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={4}>\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    label=\"Middle Name\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={formData.personal.middleName}\r\n                                                    onChange={handleFormData('personal', 'middleName')}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={4}>\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    label=\"Last Name\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={formData.personal.lastName}\r\n                                                    onChange={handleFormData('personal', 'lastName')}\r\n                                                    required\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={4}>\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    label=\"Country\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={formData.personal.country}\r\n                                                    onChange={handleFormData('personal', 'country')}\r\n                                                    required\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={4}>\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    label=\"Office Location\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={formData.personal.offLoc}\r\n                                                    onChange={handleFormData('personal', 'offLoc')}\r\n                                                    required\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={4}>\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    label=\"Department\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={formData.personal.department}\r\n                                                    onChange={handleFormData('personal', 'department')}\r\n                                                    required\r\n                                                />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={12}>\r\n                                                <Divider />\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={12}>\r\n                                                <Typography variant=\"h4\" sx={{ mt: 2 }}>\r\n                                                    Position Details\r\n                                                </Typography>\r\n                                            </Grid>\r\n\r\n                                            <Grid item xs={4}>\r\n                                                <TextField\r\n                                                    readOnly\r\n                                                    fullWidth\r\n                                                    label=\"Manager\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={formData.position.manager}\r\n                                                    // onChange={handleFormData('position', 'manager')}\r\n                                                    required\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={4}>\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    label=\"Job Title of New Starter\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={formData.position.title}\r\n                                                    onChange={handleFormData('position', 'title')}\r\n                                                    required\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={4}>\r\n                                                <FormControl fullWidth>\r\n                                                    <InputLabel id=\"demo-simple-select-label\">Employement Type</InputLabel>\r\n                                                    <Select\r\n                                                        labelId=\"demo-simple-select-label\"\r\n                                                        id=\"demo-simple-select\"\r\n                                                        label=\"Employement Type\"\r\n                                                        value={formData.position.empType}\r\n                                                        onChange={handleFormData('position', 'empType')}\r\n                                                    >\r\n                                                        <MenuItem value=\"Full Time Employee\">Full Time Employee</MenuItem>\r\n                                                        <MenuItem value=\"Part Time Employee\">Part Time Employee</MenuItem>\r\n                                                        <MenuItem value=\"Temporary Time Employee\">Temporary Time Employee</MenuItem>\r\n                                                        <MenuItem value=\"Internship Worker\">Internship Worker</MenuItem>\r\n                                                        <MenuItem value=\"Voluntary Worker\">Voluntary Worker</MenuItem>\r\n                                                    </Select>\r\n                                                </FormControl>\r\n                                            </Grid>\r\n\r\n                                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                                <Grid item xs={4}>\r\n                                                    <DatePicker\r\n                                                        // disablePast\r\n                                                        fullWidth\r\n                                                        openTo=\"year\"\r\n                                                        views={['year', 'month', 'day']}\r\n                                                        label=\"Start Date\"\r\n                                                        value={formData.position.start}\r\n                                                        onChange={handleDate('position', 'start')}\r\n                                                        renderInput={(params) => <TextField {...params} />}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item xs={4}>\r\n                                                    <DatePicker\r\n                                                        // disablePast\r\n                                                        fullWidth\r\n                                                        openTo=\"year\"\r\n                                                        label=\"End Date\"\r\n                                                        views={['year', 'month', 'day']}\r\n                                                        value={formData.position.end}\r\n                                                        onChange={handleDate('position', 'end')}\r\n                                                        renderInput={(params) => <TextField {...params} />}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </LocalizationProvider>\r\n                                        </Grid>\r\n                                    </>\r\n                                ) : activeStep === 1 ? (\r\n                                    <>\r\n                                        <Typography variant=\"h4\" sx={{ mt: 2, mb: 2 }}>\r\n                                            Application Details\r\n                                        </Typography>\r\n                                        <Typography variant=\"p\" sx={{ mt: 2 }}>\r\n                                            Please indicate below whether the request is for duplicating access for a current user if so\r\n                                            please provide the users full name or specify the specefic software and applications that are\r\n                                            required for the new user.\r\n                                        </Typography>\r\n\r\n                                        <Grid sx={{ mt: 2, mb: 2 }} container>\r\n                                            <Grid item xs={12}>\r\n                                                <TextField\r\n                                                    multiline\r\n                                                    rows={12}\r\n                                                    fullWidth\r\n                                                    variant=\"outlined\"\r\n                                                    value={formData.application}\r\n                                                    onChange={handleFormData('', 'application')}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </>\r\n                                ) : activeStep === 2 ? (\r\n                                    <>\r\n                                        <Grid sx={{ mt: 2, mb: 2 }} container>\r\n                                            <Grid item xs={6}>\r\n                                                <Typography variant=\"h4\" sx={{ mt: 2, mb: 2 }}>\r\n                                                    Device Type Selection\r\n                                                </Typography>\r\n                                                <FormGroup>\r\n                                                    {deviceTypes.map((device) => (\r\n                                                        <FormControlLabel\r\n                                                            key={device}\r\n                                                            control={\r\n                                                                <Checkbox\r\n                                                                    checked={checked.device[device]}\r\n                                                                    name={device}\r\n                                                                    onChange={handleChecked('device')}\r\n                                                                />\r\n                                                            }\r\n                                                            label={device}\r\n                                                        />\r\n                                                    ))}\r\n                                                </FormGroup>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <Typography variant=\"h4\" sx={{ mt: 2, mb: 2 }}>\r\n                                                    Peripheral Selection\r\n                                                </Typography>\r\n                                                <FormGroup>\r\n                                                    {peripherals.map((peripheral) => (\r\n                                                        <FormControlLabel\r\n                                                            key={peripheral}\r\n                                                            control={\r\n                                                                <Checkbox\r\n                                                                    checked={checked.peripheral[peripheral]}\r\n                                                                    name={peripheral}\r\n                                                                    onChange={handleChecked('peripheral')}\r\n                                                                />\r\n                                                            }\r\n                                                            label={peripheral}\r\n                                                        />\r\n                                                    ))}\r\n                                                </FormGroup>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </>\r\n                                ) : activeStep === 3 ? (\r\n                                    <>\r\n                                        <Typography variant=\"h4\" sx={{ mt: 2, mb: 2 }}>\r\n                                            Approval Request\r\n                                        </Typography>\r\n                                        <Typography variant=\"p\" sx={{ mt: 2 }}>\r\n                                            Select Managers to get Approval from.\r\n                                        </Typography>\r\n                                        <br />\r\n                                        <br />\r\n                                        <FormControl sx={{ m: 1 }} fullWidth>\r\n                                            <InputLabel id=\"demo-multiple-chip-label\">Managers</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"demo-multiple-chip-label\"\r\n                                                id=\"demo-multiple-chip\"\r\n                                                multiple\r\n                                                value={formData.managers}\r\n                                                onChange={handleChange}\r\n                                                input={<OutlinedInput id=\"select-multiple-chip\" label=\"Managers\" />}\r\n                                                renderValue={(selected) => (\r\n                                                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                                                        {selected.map((value) => (\r\n                                                            <Chip key={value} label={value} />\r\n                                                        ))}\r\n                                                    </Box>\r\n                                                )}\r\n                                                MenuProps={MenuProps}\r\n                                            >\r\n                                                {managersList.map(({ uid, email }) => (\r\n                                                    <MenuItem key={uid} value={email} style={getStyles(email, formData.managers, theme)}>\r\n                                                        {email}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </>\r\n                                ) : activeStep === 4 ? (\r\n                                    <>\r\n                                        <Typography variant=\"h4\" sx={{ mt: 2, mb: 2 }}>\r\n                                            Comments\r\n                                        </Typography>\r\n                                        <Typography variant=\"p\" sx={{ mt: 2 }}>\r\n                                            If you have any additional request or specefic needs, please provide detailed information here.\r\n                                        </Typography>\r\n\r\n                                        <Grid sx={{ mt: 2, mb: 2 }} container>\r\n                                            <Grid item xs={12}>\r\n                                                <TextField\r\n                                                    multiline\r\n                                                    rows={12}\r\n                                                    value={formData.comments}\r\n                                                    onChange={handleFormData('', 'comments')}\r\n                                                    fullWidth\r\n                                                    variant=\"outlined\"\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </>\r\n                                ) : null}\r\n\r\n                                <Stack direction=\"row\" spacing={2} justifyContent=\"flex-end\">\r\n                                    <Button color=\"inherit\" disabled={activeStep === 0} onClick={handleBack} sx={{ mr: 1 }}>\r\n                                        Back\r\n                                    </Button>\r\n                                    <Button\r\n                                        size=\"large\"\r\n                                        onClick={() => {\r\n                                            if (activeStep === hardwareSection) {\r\n                                                const deviceList = [];\r\n                                                Object.keys(checked.device).forEach((key) => {\r\n                                                    if (checked.device[key]) deviceList.push(key);\r\n                                                });\r\n                                                const peripheralList = [];\r\n                                                Object.keys(checked.peripheral).forEach((key) => {\r\n                                                    if (checked.peripheral[key]) peripheralList.push(key);\r\n                                                });\r\n                                                setFormData((prev) => ({\r\n                                                    ...prev,\r\n                                                    hardware: { devices: deviceList, peripherals: peripheralList }\r\n                                                }));\r\n                                            }\r\n                                            handleNext();\r\n                                        }}\r\n                                    >\r\n                                        {activeStep === steps.length - 1 ? 'Submit' : 'Next'}\r\n                                    </Button>\r\n                                </Stack>\r\n                            </React.Fragment>\r\n                        )}\r\n                    </Container>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default OnboardingForm;\r\n"],"names":["localStorage","setItem","steps","getStyles","name","personName","theme","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","hardwareSection","findIndex","curr","deviceTypes","peripherals","device","peripheral","forEach","val","_useAuthContext","useAuthContext","user","getDataByRole","useTheme","_React$useState","React","_React$useState2","_slicedToArray","activeStep","setActiveStep","_React$useState3","Set","_React$useState4","skipped","setSkipped","_React$useState5","_React$useState6","managersList","setManagersList","useEffect","manager","target","value","displayName","handleFormData","handleNext","length","prevActiveStep","managerResponse","formData","managers","managerEmail","push","managerId","uid","company","axios","concat","apiBaseURL","then","res","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","step","newSkipped","has","values","delete","_useState","useState","_useState2","checked","setChecked","handleChecked","category","e","prev","temp","_objectSpread","_defineProperty","_useState3","personal","firstName","middleName","lastName","country","offLoc","department","title","empType","start","end","application","hardware","devices","comments","_useState4","setFormData","handleDate","par","field","newVal","_jsx","_Fragment","children","_jsxs","Grid","container","rowSpacing","columnSpacing","item","xs","Typography","sx","float","variant","Container","maxWidth","Stepper","map","label","index","Step","StepLabel","mt","mb","TextField","fullWidth","onChange","required","Divider","readOnly","FormControl","InputLabel","id","Select","labelId","MenuItem","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","openTo","views","renderInput","params","multiline","rows","FormGroup","FormControlLabel","control","Checkbox","m","multiple","event","input","OutlinedInput","renderValue","selected","Box","display","flexWrap","gap","Chip","_ref","email","Stack","direction","spacing","justifyContent","Button","color","disabled","onClick","mr","size","deviceList","Object","keys","key","peripheralList"],"sourceRoot":""}