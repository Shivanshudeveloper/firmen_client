{"version":3,"file":"static/js/4887.9e165ce3.chunk.js","mappings":"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","sources":["pages/extra-pages/Projects.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Avatar,\r\n    CardContent,\r\n    CardActions,\r\n    Card,\r\n    Stack,\r\n    Typography,\r\n    Container,\r\n    Chip,\r\n    Grid,\r\n    Button,\r\n    TextField,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    Paper,\r\n    ListItemAvatar,\r\n    ListItemButton,\r\n    ListItemSecondaryAction,\r\n    Tooltip,\r\n    List,\r\n    ListItem,\r\n    IconButton,\r\n    ListItemText,\r\n    Divider\r\n} from '@mui/material';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport Box from '@mui/material/Box';\r\n\r\nimport AccountTreeIcon from '@mui/icons-material/AccountTree';\r\nimport AssignmentIcon from '@mui/icons-material/Assignment';\r\nimport PeopleIcon from '@mui/icons-material/People';\r\nimport FeedIcon from '@mui/icons-material/Feed';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { useContext } from 'react';\r\nimport { AuthContext } from 'src/App';\r\nimport axios from 'axios';\r\nimport { Checkbox, FormControl, MenuItem, OutlinedInput, Select, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\r\nimport { apiBaseURL } from 'src/config-global';\r\nimport { Link } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport { collection, firestore } from 'src/Firebase';\r\nimport { useTheme } from '@mui/styles';\r\nimport { useAuthContext } from 'src/auth/useAuthContext';\r\nimport firebase from 'firebase';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nfunction getStyles(name, personName, theme) {\r\n    return {\r\n        fontWeight: personName.indexOf(name) === -1 ? theme.typography.fontWeightRegular : theme.typography.fontWeightMedium\r\n    };\r\n}\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250\r\n        }\r\n    }\r\n};\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>\r\n            {value === index && (\r\n                <Box sx={{ p: 3 }}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`\r\n    };\r\n}\r\n\r\nconst allProjects = ['itadmin', 'admin']\r\n\r\nconst SamplePage = () => {\r\n    const { user } = useAuthContext();\r\n    const theme = useTheme();\r\n\r\n    const [tabValue, setTabValue] = React.useState(0);\r\n\r\n    const [value, setValue] = React.useState(0);\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const [tasks, setTasks] = useState([]);\r\n    const fetchTasks = () => {\r\n        axios.get(`${apiBaseURL}/manager/emptask/${user.company}?key=employee&value=${user.email}`).then((res) => {\r\n            // console.log(res.data);\r\n            setTasks(res.data);\r\n        });\r\n    };\r\n\r\n    const [projects, setProjects] = useState([]);\r\n    const fetchProjects = async () => {\r\n        if(allProjects.includes(user.role)){\r\n            // fetch all projects in company if admin/itadmin\r\n            axios.get(`${apiBaseURL}/project/${user.company}`).then((res) => {\r\n                setProjects(res.data);\r\n            });   \r\n        } else{\r\n            // fetch manager's projects\r\n            if(user.role === 'manager'){\r\n                axios.get(`${apiBaseURL}/project/${user.company}?managerId=${user.email}`).then((res) => {\r\n                    setProjects(res.data);\r\n                });    \r\n            }\r\n            else{\r\n                // fetch employee's projects\r\n                const managers = user.firestore.projects\r\n                if (!managers) return\r\n                setProjects([])\r\n                managers.map(managerId => {\r\n                    axios.get(`${apiBaseURL}/project/${user.company}?managerId=${managerId}`).then((res) => {\r\n                        setProjects(prev => ([\r\n                            ...prev, ...res.data\r\n                        ]));\r\n                    });  \r\n                })\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleTaskStatus = (uid, index) => (e) => {\r\n        const status = e.target.checked;\r\n        axios.patch(`${apiBaseURL}/manager/emptask/${uid}?status=${status}`).then((res) => {\r\n            if (res.data === 'Updated') {\r\n                fetchTasks();\r\n            }\r\n        });\r\n    };\r\n\r\n    const [newProject, setNewProject] = useState({\r\n        name: '',\r\n        desc: ''\r\n    });\r\n    const handleProjectInput = (field) => (e) => {\r\n        setNewProject((prev) => ({\r\n            ...prev,\r\n            [field]: e.target.value\r\n        }));\r\n    };\r\n\r\n    const [projectTeam, setProjectTeam] = useState([])\r\n    const getProjectTeam = async () => {\r\n        const snapshot = await firestore.collection(collection).where('projects', 'array-contains', user.email).get()\r\n        const temp = []\r\n        snapshot.forEach((doc) => {\r\n            let data = doc.data();\r\n            if (doc.id !== user.uid) {\r\n                data.uid = doc.id;\r\n                temp.push(data);\r\n            }\r\n        });\r\n        setProjectTeam(temp)\r\n    }\r\n\r\n    const handleDialogSubmit = (tab) => async () => {\r\n        if (tab === 0) {\r\n            const formData = {\r\n                managerId: user.email,\r\n                company: user.company,\r\n                ...newProject\r\n            };\r\n            const res = await axios.post(`${apiBaseURL}/project`, { formData });\r\n            if (res.data === 'Created') {\r\n                fetchProjects();\r\n                setNewProject({\r\n                    name: '',\r\n                    desc: ''\r\n                });\r\n                toast.success('New project added');\r\n            } else {\r\n                toast.error(res.data);\r\n            }\r\n        } else if (tab === 2) {\r\n            const temp = allEmployees.filter((item) => invites.includes(item.email));\r\n            const promises = [];\r\n            temp.forEach((item) => {\r\n                promises.push(\r\n                    firestore\r\n                        .collection(collection)\r\n                        .doc(item.uid)\r\n                        .update({ projects: firebase.firestore.FieldValue.arrayUnion(user.email) })\r\n                );\r\n            });\r\n            Promise.all(promises).then((res) => {\r\n                getProjectTeam()\r\n                setInvites([])\r\n                console.log('Team Updated');\r\n            });\r\n        }\r\n        handleClose();\r\n    };\r\n\r\n    const tabFunctions = new Map([\r\n        [0, fetchProjects],\r\n        [1, fetchTasks],\r\n        [2, getProjectTeam],\r\n        [3, null]\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (!user) return;\r\n        const cb = tabFunctions.get(tabValue);\r\n        if (cb) cb();\r\n    }, [tabValue]);\r\n\r\n    const [invites, setInvites] = useState([]);\r\n    const newInvites = (event) => {\r\n        const {\r\n            target: { value }\r\n        } = event;\r\n        setInvites(value);\r\n    };\r\n\r\n    const [allEmployees, setAllEmployees] = useState([]);\r\n    const getAllEmployees = () => {\r\n        const queryRef = firestore.collection(collection).where('company', '==', user.company).where('role', '==', 'employee');\r\n        const temp = [];\r\n        queryRef.get().then((snapshot) => {\r\n            snapshot.forEach((doc) => {\r\n                let data = doc.data();\r\n                if (doc.id !== user.uid) {\r\n                    data.uid = doc.id;\r\n                    temp.push(data);\r\n                }\r\n            });\r\n            setAllEmployees(temp);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                maxWidth=\"sm\"\r\n                fullWidth\r\n                scroll=\"body\"\r\n                PaperProps={{ sx: { mt: '100px', verticalAlign: 'top' } }}\r\n            >\r\n                {value === 0 ? (\r\n                    <>\r\n                        <DialogTitle variant=\"h3\">Add Project</DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText variant=\"h5\">Project Name</DialogContentText>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"project-name\"\r\n                                placeholder=\"Mission 101\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                value={newProject.name}\r\n                                onChange={handleProjectInput('name')}\r\n                            />\r\n                            <br />\r\n                            <br />\r\n                            <DialogContentText variant=\"h5\">Brief Description</DialogContentText>\r\n                            <TextField\r\n                                margin=\"dense\"\r\n                                id=\"project-desc\"\r\n                                multiline\r\n                                rows={4}\r\n                                placeholder=\"Started with ...\"\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                value={newProject.desc}\r\n                                onChange={handleProjectInput('desc')}\r\n                            />\r\n                        </DialogContent>\r\n                    </>\r\n                ) : null}\r\n                {value === 2 ? (\r\n                    <>\r\n                        <DialogTitle variant=\"h3\">Invite new user/s </DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText variant=\"h5\">Select Employees</DialogContentText>\r\n                            <FormControl fullWidth>\r\n                                <Select\r\n                                    id=\"demo-multiple-chip\"\r\n                                    multiple\r\n                                    value={invites}\r\n                                    onChange={newInvites}\r\n                                    input={<OutlinedInput id=\"select-multiple-chip\" label=\"Managers\" />}\r\n                                    renderValue={(selected) => (\r\n                                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                                            {selected.map((value) => (\r\n                                                <Chip key={value} label={value} />\r\n                                            ))}\r\n                                        </Box>\r\n                                    )}\r\n                                    MenuProps={MenuProps}\r\n                                >\r\n                                    {allEmployees.map((item) => {\r\n                                        if (item.projects?.includes(user.email)) return;\r\n                                        return (\r\n                                            <MenuItem\r\n                                                key={item.email}\r\n                                                value={item.email}\r\n                                                style={getStyles(item.email, allEmployees, theme)}\r\n                                            >\r\n                                                {`${item.displayName} (${item.email})`}\r\n                                            </MenuItem>\r\n                                        );\r\n                                    })}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </DialogContent>\r\n                    </>\r\n                ) : null}\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                    <Button onClick={handleDialogSubmit(value)}>Add</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n                {/* <Grid item xs={12}>\r\n                    <Typography sx={{ float: 'left' }} variant=\"h3\">\r\n                        Projects\r\n                    </Typography>\r\n                </Grid> */}\r\n\r\n                <Grid item xs={12}>\r\n                    <Box sx={{ width: '100%' }}>\r\n                        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                            <Tabs value={tabValue} onChange={handleChange} aria-label=\"basic tabs example\">\r\n                                <Tab icon={<AccountTreeIcon />} iconPosition=\"start\" label=\"Projects\" {...a11yProps(0)} />\r\n                                <Tab icon={<AssignmentIcon />} label=\"My Tasks\" iconPosition=\"start\" {...a11yProps(1)} />\r\n                                <Tab icon={<PeopleIcon />} label=\"Team\" iconPosition=\"start\" {...a11yProps(2)} />\r\n                                {/* <Tab icon={<FeedIcon />} label=\"Feed\" iconPosition=\"start\" {...a11yProps(3)} /> */}\r\n                            </Tabs>\r\n                        </Box>\r\n                        <TabPanel value={tabValue} index={0}>\r\n                            <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography sx={{ float: 'left' }} variant=\"h3\">\r\n                                        Projects\r\n                                    </Typography>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        startIcon={<AddIcon />}\r\n                                        sx={{ float: 'right' }}\r\n                                        onClick={() => {\r\n                                            setValue(0)\r\n                                            setOpen((open) => !open)\r\n                                        }}\r\n                                    >\r\n                                        Add a new project\r\n                                    </Button>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12}>\r\n                                    {projects.map((item) => {\r\n                                        return (\r\n                                            <>\r\n                                                <Card key={item._id} sx={{ mb: 2 }} variant=\"outlined\">\r\n                                                    <CardContent>\r\n                                                        <Typography variant=\"h5\">\r\n                                                            <Link\r\n                                                                style={{ textDecoration: 'none' }}\r\n                                                                to={`/dashboard/projectview?id=${item._id}`}\r\n                                                                state={{ title: item.name }}\r\n                                                            >\r\n                                                                {item.name}\r\n                                                            </Link>\r\n                                                        </Typography>\r\n                                                        <Typography variant=\"body1\">{item.desc}</Typography>\r\n                                                    </CardContent>\r\n                                                </Card>\r\n                                            </>\r\n                                        );\r\n                                    })}\r\n                                </Grid>\r\n                            </Grid>\r\n                        </TabPanel>\r\n                        <TabPanel value={tabValue} index={1}>\r\n                            <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography sx={{ float: 'left' }} variant=\"h3\">\r\n                                        Tasks assigned to you\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TableContainer component={Paper}>\r\n                                        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell sx={{ width: '30px' }} align=\"center\">\r\n                                                        Tasks\r\n                                                    </TableCell>\r\n                                                    <TableCell sx={{ width: '40px' }} align=\"center\">\r\n                                                        Assigned By\r\n                                                    </TableCell>\r\n                                                    <TableCell sx={{ width: '60px' }} align=\"center\">\r\n                                                        Due Date\r\n                                                    </TableCell>\r\n                                                    <TableCell sx={{ width: '60px' }} align=\"center\">\r\n                                                        Source\r\n                                                    </TableCell>\r\n                                                    <TableCell sx={{ width: '60px' }} align=\"center\">\r\n                                                        Status\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {tasks.map((item) => {\r\n                                                    return (\r\n                                                        <TableRow key={item._id} sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>\r\n                                                            <TableCell align=\"center\" scope=\"row\">\r\n                                                                <Typography sx={{ pt: 1 }} variant=\"h6\">\r\n                                                                    {item.task}\r\n                                                                </Typography>\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"center\" variant=\"h6\">\r\n                                                                {item.manager}\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"center\">\r\n                                                                <Typography sx={{ pt: 1 }} variant=\"h6\">\r\n                                                                    {item.due}\r\n                                                                </Typography>\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"center\">\r\n                                                                <Typography sx={{ pt: 1 }} variant=\"h6\">\r\n                                                                    <a href={`${item.url}`} target=\"blank\">\r\n                                                                        {item.source}\r\n                                                                    </a>\r\n                                                                </Typography>\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"center\">\r\n                                                                <Tooltip title=\"Mark Completed\">\r\n                                                                    <Checkbox\r\n                                                                        checked={item.status}\r\n                                                                        onChange={handleTaskStatus(item._id)}\r\n                                                                        inputProps={{ 'aria-label': 'controlled' }}\r\n                                                                        color=\"success\"\r\n                                                                    />\r\n                                                                </Tooltip>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    );\r\n                                                })}\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </TableContainer>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </TabPanel>\r\n                        <TabPanel value={tabValue} index={2}>\r\n                            <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography sx={{ float: 'left' }} variant=\"h3\">\r\n                                        Team\r\n                                    </Typography>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        startIcon={<AddIcon />}\r\n                                        sx={{ float: 'right' }}\r\n                                        onClick={() => {\r\n                                            getAllEmployees()\r\n                                            setValue(2)\r\n                                            setOpen((open) => !open)\r\n                                        }}\r\n                                    >\r\n                                        Add a new user\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item xs={12} >\r\n                                    <List sx={{ p: 0 }}>\r\n                                        {projectTeam.map((item, index) => {\r\n                                            return (\r\n                                                <>\r\n                                                    <ListItem\r\n                                                        id={item.uid}\r\n                                                        key={item.uid}\r\n                                                        sx={{ p: 0 }}\r\n                                                        secondaryAction={\r\n                                                            <IconButton\r\n                                                                edge=\"end\"\r\n                                                                aria-label=\"delete\"\r\n                                                                sx={{ borderRadius: '50%' }}\r\n                                                                onClick={() => {\r\n                                                                    firestore\r\n                                                                        .collection(collection)\r\n                                                                        .doc(item.uid)\r\n                                                                        .update({\r\n                                                                            projects: firebase.firestore.FieldValue.arrayRemove(\r\n                                                                                user.email\r\n                                                                            )\r\n                                                                        })\r\n                                                                        .then((res) => {\r\n                                                                            const teamMem = document.getElementById(\r\n                                                                                item.uid\r\n                                                                            );\r\n                                                                            teamMem.style.display = 'none';\r\n                                                                        });\r\n                                                                }}\r\n                                                            >\r\n                                                                <DeleteIcon />\r\n                                                            </IconButton>\r\n                                                        }\r\n                                                    >\r\n                                                        <ListItemAvatar>\r\n                                                            <Avatar alt=\"DP\" src={item.photoURL} />\r\n                                                        </ListItemAvatar>\r\n                                                        <ListItemText primary={item.displayName} secondary={item.email} />\r\n                                                    </ListItem>\r\n                                                    <Divider />\r\n                                                </>\r\n                                            );\r\n                                            }\r\n                                        )}\r\n                                    </List>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </TabPanel>\r\n                        <TabPanel value={tabValue} index={3}>\r\n                            <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography sx={{ float: 'left' }} variant=\"h3\">\r\n                                        Feed\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </TabPanel>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SamplePage;\r\n"],"names":["getStyles","name","personName","theme","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","TabPanel","props","children","value","index","other","_objectWithoutProperties","_excluded","_jsx","_objectSpread","role","hidden","id","concat","Box","sx","p","Typography","a11yProps","allProjects","user","useAuthContext","useTheme","_React$useState","React","_React$useState2","_slicedToArray","tabValue","setTabValue","_React$useState3","_React$useState4","setValue","_React$useState5","_React$useState6","open","setOpen","handleClose","_useState","useState","_useState2","tasks","setTasks","fetchTasks","axios","apiBaseURL","company","email","then","res","data","_useState3","_useState4","projects","setProjects","fetchProjects","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","managers","wrap","_context","prev","next","includes","firestore","abrupt","map","managerId","_toConsumableArray","stop","apply","arguments","_useState5","desc","_useState6","newProject","setNewProject","handleProjectInput","field","e","_defineProperty","target","_useState7","_useState8","projectTeam","setProjectTeam","getProjectTeam","_ref2","_callee2","snapshot","temp","_context2","collection","where","get","sent","forEach","doc","uid","push","tabFunctions","Map","useEffect","cb","tab","_useState9","_useState10","invites","setInvites","_useState11","_useState12","allEmployees","setAllEmployees","_jsxs","_Fragment","Dialog","onClose","maxWidth","fullWidth","scroll","mt","verticalAlign","DialogTitle","variant","DialogContent","DialogContentText","TextField","autoFocus","margin","placeholder","onChange","multiline","rows","FormControl","Select","multiple","event","input","OutlinedInput","label","renderValue","selected","display","flexWrap","gap","Chip","item","_item$projects","MenuItem","displayName","DialogActions","Button","onClick","_callee3","formData","promises","_context3","toast","filter","update","firebase","Promise","all","console","log","Grid","container","rowSpacing","columnSpacing","xs","borderBottom","borderColor","Tabs","newValue","Tab","icon","AccountTreeIcon","iconPosition","AssignmentIcon","PeopleIcon","float","startIcon","AddIcon","Card","mb","CardContent","Link","textDecoration","to","_id","state","title","TableContainer","component","Paper","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","border","scope","pt","task","manager","due","href","url","source","Tooltip","Checkbox","checked","status","inputProps","color","queryRef","getAllEmployees","List","ListItem","secondaryAction","IconButton","edge","borderRadius","document","getElementById","DeleteIcon","ListItemAvatar","Avatar","alt","src","photoURL","ListItemText","primary","secondary","Divider"],"sourceRoot":""}