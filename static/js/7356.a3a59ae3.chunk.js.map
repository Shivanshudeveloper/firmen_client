{"version":3,"file":"static/js/7356.a3a59ae3.chunk.js","mappings":"6SAiBe,SAASA,IACtB,IAAQC,GAAiBC,EAAAA,EAAAA,MAAjBD,aAEAE,GAASC,EAAAA,EAAAA,MAATD,KAEFE,EAAcC,EAAAA,GAAAA,MAAe,SAACC,GAAI,OAAKC,EAAAA,EAAAA,GAAUD,EAAKJ,QAAUA,CAAI,IAE1E,OACEM,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAAAF,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,qCAGTF,EAAAA,EAAAA,MAACK,EAAAA,EAAS,CAACC,UAAUd,GAAuB,KAAKU,SAAA,EAC/CC,EAAAA,EAAAA,KAACI,EAAAA,EAAiB,CAChBC,QAAQ,YACRC,MAAO,CACL,CACEf,KAAM,YACNgB,KAAMC,EAAAA,GAAAA,MAER,CACEjB,KAAM,OACNgB,KAAMC,EAAAA,GAAAA,KAAAA,MAER,CAAEjB,KAAiB,OAAXE,QAAW,IAAXA,OAAW,EAAXA,EAAaF,UAIzBS,EAAAA,EAAAA,KAACS,EAAAA,EAAe,CAACC,QAAM,EAACjB,YAAaA,SAI7C,C,iFC9CM,SAAUkB,EAAQC,EAAeC,GACrC,YADqC,IAAAA,IAAAA,EAAA,KAC9BC,EAAAA,EAAAA,GAAOF,GAAKG,EAAAA,EAAAA,IAAA,CACjBC,UAAW,KACRH,GAEP,C,wDC4CM,SAAUI,EAAUC,GACxB,OAAOA,EAAIC,aACb,CC7CA,IAAMC,EAAuB,CAAC,qBAAsB,wBAG9CC,EAAuB,eAKvB,SAAUP,EAAOF,EAAeC,QAAA,IAAAA,IAAAA,EAAA,IAiBpC,IAfE,IAAAS,EAIET,EAAOU,YAJTA,OAAW,IAAAD,EAAGF,EAAoBE,EAClCE,EAGEX,EAAOY,YAHTA,OAAW,IAAAD,EAAGH,EAAoBG,EAClCE,EAEEb,EAAOc,UAFTA,OAAS,IAAAD,EAAGT,EAASS,EACrBE,EACEf,EAAOG,UADTA,OAAS,IAAAY,EAAG,IAAGA,EAGbC,EAASC,EACXA,EAAQlB,EAAOW,EAAa,UAC5BE,EACA,MAEEM,EAAQ,EACRC,EAAMH,EAAOI,OAGe,OAAzBJ,EAAOK,OAAOH,IAAiBA,IACtC,KAAkC,OAA3BF,EAAOK,OAAOF,EAAM,IAAaA,IAGxC,OAAOH,EAAOM,MAAMJ,EAAOC,GAAKI,MAAM,MAAMC,IAAIV,GAAWW,KAAKtB,EAClE,CAKA,SAASc,EAAQlB,EAAe2B,EAAuBC,GACrD,OAAID,aAAcE,OAAe7B,EAAMkB,QAAQS,EAAIC,GAC5CD,EAAGG,QAAO,SAAC9B,EAAO2B,GAAO,OAAA3B,EAAMkB,QAAQS,EAAIC,EAAlB,GAA0B5B,EAC5D,C,iFC5CM,SAAUhB,EAAUgB,EAAeC,GACvC,YADuC,IAAAA,IAAAA,EAAA,KAChCF,EAAAA,EAAAA,GAAQC,GAAKG,EAAAA,EAAAA,IAAA,CAClBC,UAAW,KACRH,GAEP,C","sources":["pages/dashboard/UserEditPage.js","../node_modules/dot-case/src/index.ts","../node_modules/lower-case/src/index.ts","../node_modules/no-case/src/index.ts","../node_modules/param-case/src/index.ts"],"sourcesContent":["import { Helmet } from 'react-helmet-async';\r\nimport { paramCase } from 'change-case';\r\nimport { useParams } from 'react-router-dom';\r\n// @mui\r\nimport { Container } from '@mui/material';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// _mock_\r\nimport { _userList } from '../../_mock/arrays';\r\n// components\r\nimport { useSettingsContext } from '../../components/settings';\r\nimport CustomBreadcrumbs from '../../components/custom-breadcrumbs';\r\n// sections\r\nimport UserNewEditForm from '../../sections/@dashboard/user/UserNewEditForm';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function UserEditPage() {\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const { name } = useParams();\r\n\r\n  const currentUser = _userList.find((user) => paramCase(user.name) === name);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> User: Edit user | Minimal UI</title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <CustomBreadcrumbs\r\n          heading=\"Edit user\"\r\n          links={[\r\n            {\r\n              name: 'Dashboard',\r\n              href: PATH_DASHBOARD.root,\r\n            },\r\n            {\r\n              name: 'User',\r\n              href: PATH_DASHBOARD.user.list,\r\n            },\r\n            { name: currentUser?.name },\r\n          ]}\r\n        />\r\n\r\n        <UserNewEditForm isEdit currentUser={currentUser} />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import { noCase, Options } from \"no-case\";\n\nexport { Options };\n\nexport function dotCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \".\",\n    ...options,\n  });\n}\n","/**\n * Locale character mapping rules.\n */\ninterface Locale {\n  regexp: RegExp;\n  map: Record<string, string>;\n}\n\n/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nconst SUPPORTED_LOCALE: Record<string, Locale> = {\n  tr: {\n    regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n    map: {\n      İ: \"\\u0069\",\n      I: \"\\u0131\",\n      İ: \"\\u0069\",\n    },\n  },\n  az: {\n    regexp: /\\u0130/g,\n    map: {\n      İ: \"\\u0069\",\n      I: \"\\u0131\",\n      İ: \"\\u0069\",\n    },\n  },\n  lt: {\n    regexp: /\\u0049|\\u004A|\\u012E|\\u00CC|\\u00CD|\\u0128/g,\n    map: {\n      I: \"\\u0069\\u0307\",\n      J: \"\\u006A\\u0307\",\n      Į: \"\\u012F\\u0307\",\n      Ì: \"\\u0069\\u0307\\u0300\",\n      Í: \"\\u0069\\u0307\\u0301\",\n      Ĩ: \"\\u0069\\u0307\\u0303\",\n    },\n  },\n};\n\n/**\n * Localized lower case.\n */\nexport function localeLowerCase(str: string, locale: string) {\n  const lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n  if (lang) return lowerCase(str.replace(lang.regexp, (m) => lang.map[m]));\n  return lowerCase(str);\n}\n\n/**\n * Lower case as a function.\n */\nexport function lowerCase(str: string) {\n  return str.toLowerCase();\n}\n","import { lowerCase } from \"lower-case\";\n\nexport interface Options {\n  splitRegexp?: RegExp | RegExp[];\n  stripRegexp?: RegExp | RegExp[];\n  delimiter?: string;\n  transform?: (part: string, index: number, parts: string[]) => string;\n}\n\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nconst DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n\n// Remove all non-word characters.\nconst DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input: string, options: Options = {}) {\n  const {\n    splitRegexp = DEFAULT_SPLIT_REGEXP,\n    stripRegexp = DEFAULT_STRIP_REGEXP,\n    transform = lowerCase,\n    delimiter = \" \",\n  } = options;\n\n  let result = replace(\n    replace(input, splitRegexp, \"$1\\0$2\"),\n    stripRegexp,\n    \"\\0\"\n  );\n  let start = 0;\n  let end = result.length;\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  while (result.charAt(end - 1) === \"\\0\") end--;\n\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input: string, re: RegExp | RegExp[], value: string) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce((input, re) => input.replace(re, value), input);\n}\n","import { dotCase, Options } from \"dot-case\";\n\nexport { Options };\n\nexport function paramCase(input: string, options: Options = {}) {\n  return dotCase(input, {\n    delimiter: \"-\",\n    ...options,\n  });\n}\n"],"names":["UserEditPage","themeStretch","useSettingsContext","name","useParams","currentUser","_userList","user","paramCase","_jsxs","_Fragment","children","_jsx","Helmet","Container","maxWidth","CustomBreadcrumbs","heading","links","href","PATH_DASHBOARD","UserNewEditForm","isEdit","dotCase","input","options","noCase","__assign","delimiter","lowerCase","str","toLowerCase","DEFAULT_SPLIT_REGEXP","DEFAULT_STRIP_REGEXP","_a","splitRegexp","_b","stripRegexp","_c","transform","_d","result","replace","start","end","length","charAt","slice","split","map","join","re","value","RegExp","reduce"],"sourceRoot":""}