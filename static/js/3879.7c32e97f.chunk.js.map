{"version":3,"file":"static/js/3879.7c32e97f.chunk.js","mappings":"kgBAiDMA,EAAQ,CAAC,eAAgB,sBAAuB,mBAAoB,cAEpEC,EAAkBD,EAAME,WAAU,SAACC,GAAI,MAAc,qBAATA,CAA2B,IACvEC,EAAc,CAChB,2BACA,4BACA,4BACA,4BACA,6BACA,8BAEEC,EAAc,CAAC,UAAW,qBAAsB,QAAS,WAAY,eAAgB,WACrFC,EAAS,CAAC,EACVC,EAAa,CAAC,EACpBH,EAAYI,SAAQ,SAACC,GAAG,OAAMH,EAAOG,IAAO,CAAK,IACjDJ,EAAYG,SAAQ,SAACC,GAAG,OAAMF,EAAWE,IAAO,CAAK,IAqYrD,UArXuB,WACnB,IAAAC,GAAgCC,EAAAA,EAAAA,KAAxBC,EAAIF,EAAJE,KAAMC,EAAaH,EAAbG,cAEdC,GAA0CC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GAEtCI,EAAoCC,EAAAA,SAAe,GAAEC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAA9CG,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,EAA8BJ,EAAAA,SAAe,IAAIK,KAAMC,GAAAV,EAAAA,EAAAA,GAAAQ,EAAA,GAAhDG,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAUpBG,EAAa,WACf,GAAIP,IAAevB,EAAM+B,OAAS,EAiB9B,OAhBAP,GAAc,SAACQ,GAAc,OAAKA,EAAiB,CAAC,IACpDC,GAASC,UAAYtB,EAAKuB,IAC1BF,GAASG,QAAUxB,EAAKyB,YACxBJ,GAASK,QAAU1B,EAAK0B,aAExBC,EAAAA,EAAAA,KAAW,GAADC,OAAIC,EAAAA,GAAU,wBAAwB,CAAER,SAAAA,KAAYS,MAAK,SAACC,GAChEC,EAAAA,GAAAA,QAAc,eAAgB,CAC1BC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,GAElB,IAIJ,IAzBmBC,EAyBfC,EAAa1B,EAzBEyB,EA0BD9B,EAzBXK,EAAQ2B,IAAIF,KA0BfC,EAAa,IAAI5B,IAAI4B,EAAWE,WACrBC,OAAOlC,GAGtBC,GAAc,SAACQ,GAAc,OAAKA,EAAiB,CAAC,IACpDH,EAAWyB,EACf,EAyBAI,IAAgC3C,EAAAA,EAAAA,UAAS,CACrC4C,UAAW,GACXC,WAAY,GACZC,SAAU,GACVC,SAAS,IAAIC,MAAOC,qBACpBC,WAAY,GACZC,SAAU,CAAEC,QAAS,GAAI9D,YAAa,IACtC+D,SACI,KACNC,IAAApD,EAAAA,EAAAA,GAAAyC,GAAA,GATKzB,GAAQoC,GAAA,GAAEC,GAAWD,GAAA,GAWtBE,GAAe,SAACC,GAAK,OAAK,SAACC,GAC7BH,IAAY,SAACI,GACT,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYD,GAAI,IAAAE,EAAAA,EAAAA,GAAA,GAAGJ,EAAQC,EAAEI,OAAOC,OACxC,GACJ,CAAE,EAaFC,GAA4C1D,EAAAA,UAAe,GAAM2D,IAAA/D,EAAAA,EAAAA,GAAA8D,GAAA,GAA1DE,GAAcD,GAAA,GAAEE,GAAiBF,GAAA,GAKxCG,IAA8BpE,EAAAA,EAAAA,UAAS,CACnCT,OAAAA,EACAC,WAAAA,IACF6E,IAAAnE,EAAAA,EAAAA,GAAAkE,GAAA,GAHKE,GAAOD,GAAA,GAAEE,GAAUF,GAAA,GAKpBG,GAAgB,SAACC,GAAQ,OAAK,SAACf,GACjCa,IAAW,SAACZ,GACR,IAAIe,EAAOJ,GAAQG,GAEnB,OADAC,GAAId,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQc,GAAI,IAAAb,EAAAA,EAAAA,GAAA,GAAGH,EAAEI,OAAOa,MAAQL,GAAQG,GAAUf,EAAEI,OAAOa,SAC/Df,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYD,GAAI,IAAAE,EAAAA,EAAAA,GAAA,GAAGY,EAAWC,GAClC,GACJ,CAAE,EAMF,OAJAE,EAAAA,EAAAA,YAAU,WACNxE,EAAiBN,IACrB,GAAG,KAGC+E,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,WAAS,EAACC,WAAY,IAAKC,cAAe,KAAKL,SAAA,EACjDF,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAGP,UACdF,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,GAAI,CAAEC,MAAO,QAAUC,QAAQ,KAAIX,SAAC,wBAKpDF,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAGP,UACdC,EAAAA,EAAAA,MAACW,EAAAA,EAAS,CAACC,SAAS,KAAIb,SAAA,EACpBF,EAAAA,EAAAA,KAACgB,EAAAA,EAAO,CAACrF,WAAYA,EAAWuE,SAC3B9F,EAAM6G,KAAI,SAACC,EAAOC,GAGf,OACInB,EAAAA,EAAAA,KAACoB,EAAAA,GAAIrC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAHS,CAAC,GAGgB,IAAAmB,UAC3BF,EAAAA,EAAAA,KAACqB,EAAAA,GAAStC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAHC,CAAC,GAGa,IAAAmB,SAAGgB,OADrBA,EAInB,MAEHvF,IAAevB,EAAM+B,QAClB6D,EAAAA,EAAAA,KAACvE,EAAAA,SAAc,CAAAyE,UACXC,EAAAA,EAAAA,MAAA,UAAAD,SAAA,EACIF,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACG,QAAQ,KAAIX,SAAC,kDAIjCC,EAAAA,EAAAA,MAAC1E,EAAAA,SAAc,CAAAyE,SAAA,CACK,IAAfvE,GACGwE,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACG,QAAQ,KAAKF,GAAI,CAAEW,GAAI,EAAGC,GAAI,GAAIrB,SAAC,sBAG/CC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,WAAS,EAACC,WAAY,IAAKC,cAAe,KAAKL,SAAA,EACjDF,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAEP,UACbF,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CACNC,WAAS,EACTP,MAAM,aACNL,QAAQ,WACRa,UAAQ,EACRxC,MAAO7C,GAAS0B,UAChB4D,SAAUhD,GAAa,kBAG/BqB,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAEP,UACbF,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CACNC,WAAS,EACTP,MAAM,cACNL,QAAQ,WACRa,UAAQ,EACRxC,MAAO7C,GAAS2B,WAChB2D,SAAUhD,GAAa,mBAG/BqB,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAEP,UACbF,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CACNC,WAAS,EACTP,MAAM,YACNL,QAAQ,WACRa,UAAQ,EACRxC,MAAO7C,GAAS4B,SAChB0D,SAAUhD,GAAa,iBAG/BqB,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAEP,UACbF,EAAAA,EAAAA,KAAC4B,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAa5B,UAC5CF,EAAAA,EAAAA,KAAC+B,EAAAA,EAAU,CACPb,MAAM,OACNc,eAAa,EACbC,OAAO,OACPC,MAAO,CAAC,OAAQ,QAAS,OACzBhD,MAAO7C,GAAS6B,QAChByD,SAAU,SAACQ,GACPzD,IAAY,SAACI,GAAI,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWD,GAAI,IAAEZ,QAASiE,GAAQ,GACvD,EACAC,YAAa,SAACC,GAAM,OAAKrC,EAAAA,EAAAA,KAACwB,EAAAA,GAASzC,EAAAA,EAAAA,GAAA,GAAKsD,GAAU,cAMvD,IAAf1G,GACAwE,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACG,QAAQ,KAAKF,GAAI,CAAEW,GAAI,EAAGC,GAAI,GAAIrB,SAAC,yBAG/CF,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACG,QAAQ,IAAIF,GAAI,CAAEW,GAAI,GAAIpB,SAAC,2NAMvCF,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACO,GAAI,CAAEW,GAAI,EAAGC,GAAI,GAAKlB,WAAS,EAAAH,UACjCF,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAEP,UACbF,EAAAA,EAAAA,KAACsC,EAAAA,EAAgB,CACbC,SACIvC,EAAAA,EAAAA,KAACwC,EAAAA,EAAM,CACH/C,QAASJ,GACTsC,SA9H3B,SAACc,GAC1BnD,GAAkBmD,EAAMxD,OAAOQ,QACnC,EA6HwDiD,WAAY,CAAE,aAAc,gBAGpCxB,MAAM,6BAIlBlB,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACO,GAAI,CAAEW,GAAI,EAAGC,GAAI,GAAKlB,WAAS,EAAAH,SAChCb,KACGc,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAEP,SAAA,EACbF,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACG,QAAQ,IAAIF,GAAI,CAAEW,GAAI,GAAIpB,SAAC,uBAGvCC,EAAAA,EAAAA,MAACwC,EAAAA,EAAW,CAAChC,GAAI,CAAEiC,EAAG,GAAKnB,WAAS,EAAAvB,SAAA,EAChCF,EAAAA,EAAAA,KAAC6C,EAAAA,EAAU,CAACC,GAAG,2BAA0B5C,SAAC,eAC1CF,EAAAA,EAAAA,KAAC+C,EAAAA,EAAM,CACHC,QAAQ,2BACRF,GAAG,qBACHG,UAAQ,EACR/D,MAAO7C,GAASgC,WAChBsD,SA/J/B,SAACc,GACtB,IACcvD,EACVuD,EADAxD,OAAUC,MAEVA,EAAM/C,OAAS,GACnBuC,IAAY,SAACI,GAAI,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACVD,GAAI,IACPT,WAAYa,GAAK,GAEzB,EAuJwDgE,OAAOlD,EAAAA,EAAAA,KAACmD,EAAAA,EAAa,CAACL,GAAG,uBAAuB5B,MAAM,aACtDkC,YAAa,SAACC,GAAQ,OAClBrD,EAAAA,EAAAA,KAACsD,EAAAA,EAAG,CAAC3C,GAAI,CAAE4C,QAAS,OAAQC,SAAU,OAAQC,IAAK,IAAMvD,SACpDmD,EAASpC,KAAI,SAAC/B,GAAK,OAChBc,EAAAA,EAAAA,KAAC0D,EAAAA,EAAI,CAAaxC,MAAOhC,GAAdA,EAAuB,KAEpC,EAEVgB,SAEC5E,EAAc2F,KAAI,SAAC0C,GAAG,OACnB3D,EAAAA,EAAAA,KAAC4D,EAAAA,EAAQ,CAAiB1E,MAAOyE,EAAIE,MAAM3D,SAAA,GAAAtD,OACnC+G,EAAIlH,YAAW,MAAAG,OAAK+G,EAAIE,MAAK,MADtBF,EAAIE,MAER,iBAQxB,IAAflI,GACAqE,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACO,GAAI,CAAEW,GAAI,EAAGC,GAAI,GAAKlB,WAAS,EAAAH,SAAA,EACjCC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAEP,SAAA,EACbF,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACG,QAAQ,KAAKF,GAAI,CAAEW,GAAI,EAAGC,GAAI,GAAIrB,SAAC,2BAG/CF,EAAAA,EAAAA,KAAC8D,EAAAA,EAAS,CAAA5D,SACL1F,EAAYyG,KAAI,SAACvG,GAAM,OACpBsF,EAAAA,EAAAA,KAACsC,EAAAA,EAAgB,CAEbC,SACIvC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAQ,CACLtE,QAASA,GAAQ/E,OAAOA,GACxBoF,KAAMpF,EACNiH,SAAUhC,GAAc,YAGhCuB,MAAOxG,GARFA,EASP,UAIdyF,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAEP,SAAA,EACbF,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACG,QAAQ,KAAKF,GAAI,CAAEW,GAAI,EAAGC,GAAI,GAAIrB,SAAC,0BAG/CF,EAAAA,EAAAA,KAAC8D,EAAAA,EAAS,CAAA5D,SACLzF,EAAYwG,KAAI,SAACtG,GAAU,OACxBqF,EAAAA,EAAAA,KAACsC,EAAAA,EAAgB,CAEbC,SACIvC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAQ,CACLtE,QAASA,GAAQ9E,WAAWA,GAC5BmF,KAAMnF,EACNgH,SAAUhC,GAAc,gBAGhCuB,MAAOvG,GARFA,EASP,cAMP,IAAfgB,GACAwE,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACG,QAAQ,KAAKF,GAAI,CAAEW,GAAI,EAAGC,GAAI,GAAIrB,SAAC,cAG/CF,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACG,QAAQ,IAAIF,GAAI,CAAEW,GAAI,GAAIpB,SAAC,qGAIvCF,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACO,GAAI,CAAEW,GAAI,EAAGC,GAAI,GAAKlB,WAAS,EAAAH,UACjCF,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAGP,UACdF,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CACNwC,WAAS,EACTC,KAAM,GACNxC,WAAS,EACTZ,QAAQ,WACR3B,MAAO7C,GAASmC,SAChBmD,SAAUhD,GAAa,qBAKvC,MAEJwB,EAAAA,EAAAA,MAAC+D,EAAAA,EAAK,CAACC,UAAU,MAAMC,QAAS,EAAGC,eAAe,WAAUnE,SAAA,EACxDF,EAAAA,EAAAA,KAACsE,EAAAA,EAAM,CAACC,MAAM,UAAUC,SAAyB,IAAf7I,EAAkB8I,QAnSjE,WACf7I,GAAc,SAACQ,GAAc,OAAKA,EAAiB,CAAC,GACxD,EAiSyGuE,GAAI,CAAE+D,GAAI,GAAIxE,SAAC,UAGxFF,EAAAA,EAAAA,KAACsE,EAAAA,EAAM,CACHK,KAAK,QACLF,QAAS,WACL,GAAI9I,IAAetB,EAAiB,CAChC,IAAMuK,EAAa,GACnBC,OAAOC,KAAKrF,GAAQ/E,QAAQE,SAAQ,SAACmK,GAC7BtF,GAAQ/E,OAAOqK,IAAMH,EAAWI,KAAKD,EAC7C,IACA,IAAME,EAAiB,GACvBJ,OAAOC,KAAKrF,GAAQ9E,YAAYC,SAAQ,SAACmK,GACjCtF,GAAQ9E,WAAWoK,IAAME,EAAeD,KAAKD,EACrD,IACArG,IAAY,SAACI,GAAI,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACVD,GAAI,IACPR,SAAU,CAAEC,QAASqG,EAAYnK,YAAawK,IAAgB,GAEtE,CACA/I,GACJ,EAAEgE,SAEDvE,IAAevB,EAAM+B,OAAS,EAAI,SAAW,wBAUtF,C","sources":["pages/extra-pages/OffboardingForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Avatar,\r\n    CardContent,\r\n    CardActions,\r\n    Card,\r\n    Stack,\r\n    Typography,\r\n    Container,\r\n    Chip,\r\n    Grid,\r\n    Button,\r\n    Paper,\r\n    TextField,\r\n    ListItemAvatar,\r\n    ListItemButton,\r\n    ListItemSecondaryAction,\r\n    Tooltip,\r\n    Divider\r\n} from '@mui/material';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Stepper from '@mui/material/Stepper';\r\nimport Step from '@mui/material/Step';\r\nimport StepLabel from '@mui/material/StepLabel';\r\n\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\n\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport { OutlinedInput, Switch } from '@mui/material';\r\nimport { useContext } from 'react';\r\nimport { AuthContext } from 'src/App';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { apiBaseURL } from 'src/config-global';\r\nimport { useAuthContext } from 'src/auth/useAuthContext';\r\n\r\n// ==============================|| SAMPLE PAGE ||============================== //\r\n\r\nconst steps = ['User Details', 'Data Access Request', 'Hardware Section', 'Other Info'];\r\n\r\nconst hardwareSection = steps.findIndex((curr) => curr === 'Hardware Section');\r\nconst deviceTypes = [\r\n    'Laptop - Standard Device',\r\n    'Laptop - Executive Device',\r\n    'Laptop - Developer Device',\r\n    'Desktop - Standard Device',\r\n    'Desktop - Executive Device',\r\n    'Desktop - Developer Device'\r\n];\r\nconst peripherals = ['Monitor', 'Additional Monitor', 'Mouse', 'Keyboard', 'Dock Station', 'Headset'];\r\nconst device = {};\r\nconst peripheral = {};\r\ndeviceTypes.forEach((val) => (device[val] = false));\r\nperipherals.forEach((val) => (peripheral[val] = false));\r\n\r\n// const employeesList = [\r\n//     'Test Manager',\r\n//     'Oliver Hansen',\r\n//     'Van Henry',\r\n//     'April Tucker',\r\n//     'Ralph Hubbard',\r\n//     'Omar Alexander',\r\n//     'Carlos Abbott',\r\n//     'Miriam Wagner',\r\n//     'Bradley Wilkerson',\r\n//     'Virginia Andrews',\r\n//     'Kelly Snyder'\r\n// ];\r\n\r\nconst OnboardingForm = () => {\r\n    const { user, getDataByRole } = useAuthContext();\r\n\r\n    const [employeesList, setEmployeesList] = useState([])\r\n\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [skipped, setSkipped] = React.useState(new Set());\r\n\r\n    const isStepOptional = (step) => {\r\n        return step === 1;\r\n    };\r\n\r\n    const isStepSkipped = (step) => {\r\n        return skipped.has(step);\r\n    };\r\n\r\n    const handleNext = () => {\r\n        if (activeStep === steps.length - 1) {\r\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            formData.managerId = user.uid;\r\n            formData.manager = user.displayName;\r\n            formData.company = user.company\r\n            // console.log(formData);\r\n            axios.post(`${apiBaseURL}/manager/offboarding`, { formData }).then((res) => {\r\n                toast.success('Request sent', {\r\n                    position: 'top-right',\r\n                    autoClose: 5000,\r\n                    hideProgressBar: true,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: true,\r\n                    progress: undefined\r\n                });\r\n            });\r\n            return;\r\n        }\r\n\r\n        let newSkipped = skipped;\r\n        if (isStepSkipped(activeStep)) {\r\n            newSkipped = new Set(newSkipped.values());\r\n            newSkipped.delete(activeStep);\r\n        }\r\n\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        setSkipped(newSkipped);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    const handleSkip = () => {\r\n        if (!isStepOptional(activeStep)) {\r\n            // You probably want to guard against something like this,\r\n            // it should never occur unless someone's actively trying to break something.\r\n            throw new Error(\"You can't skip a step that isn't optional.\");\r\n        }\r\n\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        setSkipped((prevSkipped) => {\r\n            const newSkipped = new Set(prevSkipped.values());\r\n            newSkipped.add(activeStep);\r\n            return newSkipped;\r\n        });\r\n    };\r\n\r\n    const handleReset = () => {\r\n        setActiveStep(0);\r\n    };\r\n\r\n    const [formData, setFormData] = useState({\r\n        firstName: '',\r\n        middleName: '',\r\n        lastName: '',\r\n        endDate: new Date().toLocaleDateString(),\r\n        delegation: [],\r\n        hardware: { devices: [], peripherals: [] },\r\n        comments:\r\n            ''\r\n    });\r\n\r\n    const handleChange = (field) => (e) => {\r\n        setFormData((prev) => {\r\n            return { ...prev, [field]: e.target.value };\r\n        });\r\n    };\r\n\r\n    const handleDelegation = (event) => {\r\n        const {\r\n            target: { value }\r\n        } = event;\r\n        if (value.length > 2) return;\r\n        setFormData((prev) => ({\r\n            ...prev,\r\n            delegation: value\r\n        }));\r\n    };\r\n\r\n    const [delegationFlag, setDelegationFlag] = React.useState(false);\r\n    const handleDelegationFlag = (event) => {\r\n        setDelegationFlag(event.target.checked);\r\n    };\r\n\r\n    const [checked, setChecked] = useState({\r\n        device,\r\n        peripheral\r\n    });\r\n\r\n    const handleChecked = (category) => (e) => {\r\n        setChecked((prev) => {\r\n            let temp = checked[category];\r\n            temp = { ...temp, [e.target.name]: !checked[category][e.target.name] };\r\n            return { ...prev, [category]: temp };\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setEmployeesList(getDataByRole())\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n                <Grid item xs={12}>\r\n                    <Typography sx={{ float: 'left' }} variant=\"h3\">\r\n                        Offboarding Form\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <Container maxWidth=\"md\">\r\n                        <Stepper activeStep={activeStep}>\r\n                            {steps.map((label, index) => {\r\n                                const stepProps = {};\r\n                                const labelProps = {};\r\n                                return (\r\n                                    <Step key={label} {...stepProps}>\r\n                                        <StepLabel {...labelProps}>{label}</StepLabel>\r\n                                    </Step>\r\n                                );\r\n                            })}\r\n                        </Stepper>\r\n                        {activeStep === steps.length ? (\r\n                            <React.Fragment>\r\n                                <center>\r\n                                    <br />\r\n                                    <br />\r\n                                    <br />\r\n                                    <br />\r\n                                    <br />\r\n                                    <Typography variant=\"h2\">Offboarding Form successfully submitted</Typography>\r\n                                </center>\r\n                            </React.Fragment>\r\n                        ) : (\r\n                            <React.Fragment>\r\n                                {activeStep === 0 ? (\r\n                                    <>\r\n                                        <Typography variant=\"h4\" sx={{ mt: 2, mb: 4 }}>\r\n                                            Employee Details\r\n                                        </Typography>\r\n                                        <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n                                            <Grid item xs={4}>\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    label=\"First Name\"\r\n                                                    variant=\"outlined\"\r\n                                                    required\r\n                                                    value={formData.firstName}\r\n                                                    onChange={handleChange('firstName')}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={4}>\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    label=\"Middle Name\"\r\n                                                    variant=\"outlined\"\r\n                                                    required\r\n                                                    value={formData.middleName}\r\n                                                    onChange={handleChange('middleName')}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={4}>\r\n                                                <TextField\r\n                                                    fullWidth\r\n                                                    label=\"Last Name\"\r\n                                                    variant=\"outlined\"\r\n                                                    required\r\n                                                    value={formData.lastName}\r\n                                                    onChange={handleChange('lastName')}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={4}>\r\n                                                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                                    <DatePicker\r\n                                                        label=\"Date\"\r\n                                                        disableFuture\r\n                                                        openTo=\"year\"\r\n                                                        views={['year', 'month', 'day']}\r\n                                                        value={formData.endDate}\r\n                                                        onChange={(newValue) => {\r\n                                                            setFormData((prev) => ({ ...prev, endDate: newValue }));\r\n                                                        }}\r\n                                                        renderInput={(params) => <TextField {...params} />}\r\n                                                    />\r\n                                                </LocalizationProvider>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </>\r\n                                ) : activeStep === 1 ? (\r\n                                    <>\r\n                                        <Typography variant=\"h4\" sx={{ mt: 2, mb: 2 }}>\r\n                                            Data Access Details\r\n                                        </Typography>\r\n                                        <Typography variant=\"p\" sx={{ mt: 2 }}>\r\n                                            Please indicate below whether the request is for duplicating access for a current user if so\r\n                                            please provide the users full name or specify the specefic software and applications that are\r\n                                            required for the new user.\r\n                                        </Typography>\r\n\r\n                                        <Grid sx={{ mt: 2, mb: 2 }} container>\r\n                                            <Grid item xs={4}>\r\n                                                <FormControlLabel\r\n                                                    control={\r\n                                                        <Switch\r\n                                                            checked={delegationFlag}\r\n                                                            onChange={handleDelegationFlag}\r\n                                                            inputProps={{ 'aria-label': 'controlled' }}\r\n                                                        />\r\n                                                    }\r\n                                                    label=\"Delegation Required\"\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid sx={{ mt: 2, mb: 2 }} container>\r\n                                            {delegationFlag && (\r\n                                                <Grid item xs={8}>\r\n                                                    <Typography variant=\"p\" sx={{ mt: 2 }}>\r\n                                                        Select Employees.\r\n                                                    </Typography>\r\n                                                    <FormControl sx={{ m: 1 }} fullWidth>\r\n                                                        <InputLabel id=\"demo-multiple-chip-label\">Employees</InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"demo-multiple-chip-label\"\r\n                                                            id=\"demo-multiple-chip\"\r\n                                                            multiple\r\n                                                            value={formData.delegation}\r\n                                                            onChange={handleDelegation}\r\n                                                            input={<OutlinedInput id=\"select-multiple-chip\" label=\"Managers\" />}\r\n                                                            renderValue={(selected) => (\r\n                                                                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                                                                    {selected.map((value) => (\r\n                                                                        <Chip key={value} label={value} />\r\n                                                                    ))}\r\n                                                                </Box>\r\n                                                            )}\r\n                                                            // MenuProps={MenuProps}\r\n                                                        >\r\n                                                            {employeesList.map((emp) => (\r\n                                                                <MenuItem key={emp.email} value={emp.email}>\r\n                                                                    {`${emp.displayName} (${emp.email})`}\r\n                                                                </MenuItem>\r\n                                                            ))}\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                </Grid>\r\n                                            )}\r\n                                        </Grid>\r\n                                    </>\r\n                                ) : activeStep === 2 ? (\r\n                                    <>\r\n                                        <Grid sx={{ mt: 2, mb: 2 }} container>\r\n                                            <Grid item xs={6}>\r\n                                                <Typography variant=\"h4\" sx={{ mt: 2, mb: 2 }}>\r\n                                                    Device Type Selection\r\n                                                </Typography>\r\n                                                <FormGroup>\r\n                                                    {deviceTypes.map((device) => (\r\n                                                        <FormControlLabel\r\n                                                            key={device}\r\n                                                            control={\r\n                                                                <Checkbox\r\n                                                                    checked={checked.device[device]}\r\n                                                                    name={device}\r\n                                                                    onChange={handleChecked('device')}\r\n                                                                />\r\n                                                            }\r\n                                                            label={device}\r\n                                                        />\r\n                                                    ))}\r\n                                                </FormGroup>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <Typography variant=\"h4\" sx={{ mt: 2, mb: 2 }}>\r\n                                                    Peripheral Selection\r\n                                                </Typography>\r\n                                                <FormGroup>\r\n                                                    {peripherals.map((peripheral) => (\r\n                                                        <FormControlLabel\r\n                                                            key={peripheral}\r\n                                                            control={\r\n                                                                <Checkbox\r\n                                                                    checked={checked.peripheral[peripheral]}\r\n                                                                    name={peripheral}\r\n                                                                    onChange={handleChecked('peripheral')}\r\n                                                                />\r\n                                                            }\r\n                                                            label={peripheral}\r\n                                                        />\r\n                                                    ))}\r\n                                                </FormGroup>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </>\r\n                                ) : activeStep === 3 ? (\r\n                                    <>\r\n                                        <Typography variant=\"h4\" sx={{ mt: 2, mb: 2 }}>\r\n                                            Comments\r\n                                        </Typography>\r\n                                        <Typography variant=\"p\" sx={{ mt: 2 }}>\r\n                                            If you have any additional request or specefic needs, please provide detailed information here.\r\n                                        </Typography>\r\n\r\n                                        <Grid sx={{ mt: 2, mb: 2 }} container>\r\n                                            <Grid item xs={12}>\r\n                                                <TextField\r\n                                                    multiline\r\n                                                    rows={12}\r\n                                                    fullWidth\r\n                                                    variant=\"outlined\"\r\n                                                    value={formData.comments}\r\n                                                    onChange={handleChange('comments')}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </>\r\n                                ) : null}\r\n\r\n                                <Stack direction=\"row\" spacing={2} justifyContent=\"flex-end\">\r\n                                    <Button color=\"inherit\" disabled={activeStep === 0} onClick={handleBack} sx={{ mr: 1 }}>\r\n                                        Back\r\n                                    </Button>\r\n                                    <Button\r\n                                        size=\"large\"\r\n                                        onClick={() => {\r\n                                            if (activeStep === hardwareSection) {\r\n                                                const deviceList = [];\r\n                                                Object.keys(checked.device).forEach((key) => {\r\n                                                    if (checked.device[key]) deviceList.push(key);\r\n                                                });\r\n                                                const peripheralList = [];\r\n                                                Object.keys(checked.peripheral).forEach((key) => {\r\n                                                    if (checked.peripheral[key]) peripheralList.push(key);\r\n                                                });\r\n                                                setFormData((prev) => ({\r\n                                                    ...prev,\r\n                                                    hardware: { devices: deviceList, peripherals: peripheralList }\r\n                                                }));\r\n                                            }\r\n                                            handleNext();\r\n                                        }}\r\n                                    >\r\n                                        {activeStep === steps.length - 1 ? 'Submit' : 'Next'}\r\n                                    </Button>\r\n                                </Stack>\r\n                            </React.Fragment>\r\n                        )}\r\n                    </Container>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default OnboardingForm;\r\n"],"names":["steps","hardwareSection","findIndex","curr","deviceTypes","peripherals","device","peripheral","forEach","val","_useAuthContext","useAuthContext","user","getDataByRole","_useState","useState","_useState2","_slicedToArray","employeesList","setEmployeesList","_React$useState","React","_React$useState2","activeStep","setActiveStep","_React$useState3","Set","_React$useState4","skipped","setSkipped","handleNext","length","prevActiveStep","formData","managerId","uid","manager","displayName","company","axios","concat","apiBaseURL","then","res","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","step","newSkipped","has","values","delete","_useState3","firstName","middleName","lastName","endDate","Date","toLocaleDateString","delegation","hardware","devices","comments","_useState4","setFormData","handleChange","field","e","prev","_objectSpread","_defineProperty","target","value","_React$useState5","_React$useState6","delegationFlag","setDelegationFlag","_useState5","_useState6","checked","setChecked","handleChecked","category","temp","name","useEffect","_jsx","_Fragment","children","_jsxs","Grid","container","rowSpacing","columnSpacing","item","xs","Typography","sx","float","variant","Container","maxWidth","Stepper","map","label","index","Step","StepLabel","mt","mb","TextField","fullWidth","required","onChange","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","disableFuture","openTo","views","newValue","renderInput","params","FormControlLabel","control","Switch","event","inputProps","FormControl","m","InputLabel","id","Select","labelId","multiple","input","OutlinedInput","renderValue","selected","Box","display","flexWrap","gap","Chip","emp","MenuItem","email","FormGroup","Checkbox","multiline","rows","Stack","direction","spacing","justifyContent","Button","color","disabled","onClick","mr","size","deviceList","Object","keys","key","push","peripheralList"],"sourceRoot":""}