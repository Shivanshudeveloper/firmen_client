{"version":3,"file":"static/js/1381.fb52d630.chunk.js","mappings":"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","sources":["sections/auth/AuthRegisterForm.js","sections/auth/Register.js","pages/auth/RegisterPage.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport * as Yup from 'yup';\r\n// form\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n// @mui\r\nimport { Stack, IconButton, InputAdornment, Alert } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// auth\r\nimport { useAuthContext } from '../../auth/useAuthContext';\r\n// components\r\nimport Iconify from '../../components/iconify';\r\nimport FormProvider, { RHFTextField } from '../../components/hook-form';\r\nimport { register } from 'src/Firebase';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AuthRegisterForm({creds}) {\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const RegisterSchema = Yup.object().shape({\r\n    firstName: Yup.string().required('First name required'),\r\n    lastName: Yup.string().required('Last name required'),\r\n    company: Yup.string().required('Company name required'),\r\n    email: Yup.string().required('Email is required').email('Email must be a valid email address'),\r\n    password: Yup.string().required('Password is required'),\r\n  });\r\n\r\n  const defaultValues = {\r\n    firstName: '',\r\n    lastName: '',\r\n    company: creds ? creds.company : '',\r\n    email: creds ? creds.email : '',\r\n    password: '',\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(RegisterSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      if (register) {\r\n        const error = await register(\r\n          data.email,\r\n          data.password,\r\n          data.company,\r\n          data.firstName,\r\n          data.lastName,\r\n          creds\r\n        );\r\n        if (error) {\r\n          throw error\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError('afterSubmit', {\r\n        ...error,\r\n        message: error.message || error,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack spacing={2.5}>\r\n        {!!errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>}\r\n\r\n        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\r\n          <RHFTextField name=\"firstName\" label=\"First name\" />\r\n          <RHFTextField name=\"lastName\" label=\"Last name\" />\r\n        </Stack>\r\n\r\n        <RHFTextField disabled={Boolean(creds)} name=\"company\" label=\"Company name\" />\r\n        <RHFTextField disabled={Boolean(creds)} name=\"email\" label=\"Email address\" />\r\n\r\n        <RHFTextField\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\r\n                  <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        <LoadingButton\r\n          fullWidth\r\n          color=\"inherit\"\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          loading={isSubmitting || isSubmitSuccessful}\r\n          sx={{\r\n            bgcolor: 'text.primary',\r\n            color: (theme) => (theme.palette.mode === 'light' ? 'common.white' : 'grey.800'),\r\n            '&:hover': {\r\n              bgcolor: 'text.primary',\r\n              color: (theme) => (theme.palette.mode === 'light' ? 'common.white' : 'grey.800'),\r\n            },\r\n          }}\r\n        >\r\n          Create account\r\n        </LoadingButton>\r\n      </Stack>\r\n    </FormProvider>\r\n  );\r\n}\r\n","import { Link as RouterLink, useLocation, useNavigate } from 'react-router-dom';\r\n// @mui\r\nimport { Stack, Typography, Link } from '@mui/material';\r\n// layouts\r\nimport LoginLayout from '../../layouts/login';\r\n// routes\r\nimport { PATH_AUTH } from '../../routes/paths';\r\n//\r\nimport AuthWithSocial from './AuthWithSocial';\r\nimport AuthRegisterForm from './AuthRegisterForm';\r\nimport axios from 'axios';\r\nimport { apiBaseURL } from 'src/config-global';\r\nimport { useEffect, useState } from 'react';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function Register() {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const token = queryParams.get('token');\r\n\r\n  const [creds, setCreds] = useState(null);\r\n  const resolveToken = async (token) => {\r\n    const res = await axios.get(`${apiBaseURL}/email?token=${token}`);\r\n    setCreds(res.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      resolveToken(token);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <LoginLayout title=\"Manage the job more effectively with Minimal\">\r\n      <Stack spacing={2} sx={{ mb: 5, position: 'relative' }}>\r\n        <Typography variant=\"h4\">Get started absolutely free.</Typography>\r\n\r\n        <Stack direction=\"row\" spacing={0.5}>\r\n          <Typography variant=\"body2\"> Already have an account? </Typography>\r\n\r\n          <Link component={RouterLink} to={PATH_AUTH.login} variant=\"subtitle2\">\r\n            Sign in\r\n          </Link>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      {token ? creds && <AuthRegisterForm creds={creds} /> : <AuthRegisterForm/> }\r\n\r\n      <Typography\r\n        component=\"div\"\r\n        sx={{ color: 'text.secondary', mt: 3, typography: 'caption', textAlign: 'center' }}\r\n      >\r\n        {'By signing up, I agree to '}\r\n        <Link underline=\"always\" color=\"text.primary\">\r\n          Terms of Service\r\n        </Link>\r\n        {' and '}\r\n        <Link underline=\"always\" color=\"text.primary\">\r\n          Privacy Policy\r\n        </Link>\r\n        .\r\n      </Typography>\r\n\r\n      {!creds && <AuthWithSocial />}\r\n    </LoginLayout>\r\n  );\r\n}\r\n","import { Helmet } from 'react-helmet-async';\r\n// sections\r\nimport Register from '../../sections/auth/Register';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function RegisterPage() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Register | Minimal UI</title>\r\n      </Helmet>\r\n\r\n      <Register />\r\n    </>\r\n  );\r\n}\r\n"],"names":["AuthRegisterForm","_ref","creds","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","RegisterSchema","Yup","shape","firstName","required","lastName","company","email","password","defaultValues","methods","useForm","resolver","yupResolver","reset","setError","handleSubmit","_methods$formState","formState","errors","isSubmitting","isSubmitSuccessful","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","error","wrap","_context","prev","next","register","sent","t0","console","_objectSpread","message","stop","_x","apply","arguments","_jsx","FormProvider","children","_jsxs","Stack","spacing","afterSubmit","Alert","severity","direction","xs","sm","RHFTextField","name","label","disabled","Boolean","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","Iconify","icon","LoadingButton","fullWidth","color","size","variant","loading","sx","bgcolor","theme","palette","mode","Register","useNavigate","location","useLocation","token","URLSearchParams","search","get","setCreds","resolveToken","res","axios","concat","apiBaseURL","useEffect","LoginLayout","title","mb","Typography","Link","component","RouterLink","to","PATH_AUTH","mt","typography","textAlign","underline","AuthWithSocial","RegisterPage","_Fragment","Helmet"],"sourceRoot":""}